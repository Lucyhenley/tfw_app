yidx <- sort(yidx)
yidx
lamps[1,1]
lamps[2,1]
out <- within(lamps, xidx <- x - Xmin)
out
out <- within(out, yidx <- y - Ymin)
plot(out[,1],out[,2])
plot(out[,4],out[,5])
plot(out$xidx,out$yidx)
xidx
out$xidx
xidxs <- sort(out$xidx)
xidxs
out <- within(lamps, xidx <- (x - Xmin)/resolution)
out <- within(out, yidx <- (y - Ymin)/resolution)
plot(out$xidx,out$yidx)
output_file = "point_irradiance.asc"
ext <- extent(coords[1]-radius,coords[1]+radius,coords[2]-radius,coords[2]+radius)
resolution <- 1
lightdist <- function(xdist,ydist,zdist) {
return ( 1/(xdist^2+ydist^2+zdist^2))
}
calculate_shadow <- function(lamps,dtm,dsm,buildings) {
buffer <- 100
absorbance <- 0.1
sensor_ht <- 2.5
surf <- dsm - dtm
#where buildings != 0, make it surf
}
ground <- raster(paste0(input_dir,"/ground.asc"))
dtm <- resample(raster(paste0(input_dir,"/dtm.tif")),ground)
dsm <- resample(raster(paste0(input_dir,"/dsm.tif")),ground)
buildings <- resample(raster(paste0(input_dir,"/built_topo_rf.asc")),ground)
lamps <- read.csv(paste0(input_dir,"/lights.csv"),col.names=c("x","y","z"))
lamps <- lamps[(lamps$x-coords[1])^2 + (lamps$y-coords[2])^2 < (radius+buffer)^2,]
plot(lamps[,1],lamps[,2],xlim=c(ext[1],ext[2]),ylim=c(ext[3],ext[4]))
buffer <- 100
absorbance <- 0.1
sensor_ht <- 2.5
surf <- dsm - dtm
buildings <- (buildings+1)*surf
buildings[is.na(buildings)] <- 0
buildings <- surf - buildings
hard_surf <- dtm + buildings
soft_surf <- surf - buildings
point_irradiance <- ground
values(point_irradiance) <- 0
Xmin = ext[1]
Xmax = ext[2]
Ymin = ext[3]
Ymax = ext[4]
out <- within(lamps, xidx <- (x - Xmin)/resolution)
print(out)
out <- within(out, yidx <- (y - Ymin)/resolution)
print(out)
plot(out$xidx,out$yidx)
point_irradiance
cellfromXY(point_irradiance, c(out$x[1],out$y[1]))
library(raster)
cellfromXY(point_irradiance, c(out$x[1],out$y[1]))
cellFromXY(point_irradiance, c(out$x[1],out$y[1]))
length(out)
nrows(out)
nrow(out)
for (i in 1:nrow(out)) {
idx = cellFromXY(point_irradiance, c(out$x[i],out$y[i]))
point_irradiance[idx] = 10
}
plot(point_irradiance)
point_irradiance
sum(point_irradiance)
values(point_irradiance) <- 0
for (i in 1:nrow(out)) {
idx = cellFromXY(point_irradiance, c(out$x[i],out$y[i]))
print(i,idx)
point_irradiance[idx] = 1
}
for (i in 1:nrow(out)) {
idx = cellFromXY(point_irradiance, c(out$x[i],out$y[i]))
print(idx)
point_irradiance[idx] = 1
}
for (i in 1:nrow(out)) {
idx = cellFromXY(point_irradiance, c(out$x[i],out$y[i]))
counter <- counter + 1
point_irradiance[idx] = 1
}
counter <- 0
for (i in 1:nrow(out)) {
idx = cellFromXY(point_irradiance, c(out$x[i],out$y[i]))
counter <- counter + 1
point_irradiance[idx] = 1
}
print(counter)
plot(point_irradiance)
for (i in 1:nrow(out)) {
idx = cellFromXY(point_irradiance, c(out$x[i],out$y[i]))
point_irradiance[idx] = 1
idx = cellFromXY(point_irradiance, c(out$x[i-1],out$y[i]))
point_irradiance[idx] = 1
idx = cellFromXY(point_irradiance, c(out$x[i],out$y[i-1]))
point_irradiance[idx] = 1
idx = cellFromXY(point_irradiance, c(out$x[i-1],out$y[i-1]))
point_irradiance[idx] = 1
}
plot(point_irradiance)
point_irradiance
for (i in 1:nrow(out)) {
#  idx = cellFromXY(point_irradiance, c(out$x[i],out$y[i]))
# point_irradiance[idx] = 1
idx = cellFromXY(point_irradiance, c(out$x[i+1],out$y[i]))
point_irradiance[idx] = 1
idx = cellFromXY(point_irradiance, c(out$x[i],out$y[i+1]))
point_irradiance[idx] = 1
idx = cellFromXY(point_irradiance, c(out$x[i+1],out$y[i+1]))
point_irradiance[idx] = 1
}
plot(point_irradiance)
idx
idx = cellFromXY(point_irradiance, c(out$x[1],out$y[1]))
dx
idx
point_irradiance[idx]
point_irradiance[out$xidx[1],out$xidx[2]]
point_irradiance[out$x[1],out$x[2]]
point_irradiance[out$x[1]-10:out$x[1]-10,out$x[2]-10,out$x[2]-10]
point_irradiance[out$xidx[1]-10:out$xidx[1]-10,out$xidx[2]-10,out$xidx[2]-10]
counter <- 0
point_irradiance[out$xidx[1]-2:out$xidx[1]-2,out$xidx[2]-2,out$xidx[2]-2]
out$xidx[1]
# NOT RUN {
r <- raster(ncol=10, nrow=5)
values(r) <- 1:ncell(r)
r
plot(r)
r[1]
r[1:10]
point_irradiance[1]
point_irradiance[1:10]
point_irradiance[1,1]
point_irradiance[1:10,1:10]
point_irradiance[1:100,1:100]
plot(point_irradiance[1:100,1:100])
max(out$x)
xmin = min(out$x)
xmax = max(out$x)
ymin = min(out$y)
ymax = max(out$y)
plot(crop(point_irradiance,extent(xmin,xmax,ymin,ymax)))
point_irradiance[xidx[1]]
point_irradiance[xidx[1],]
values(point_irradiance) <- 0
for (i in 1:nrow(out)) {
idx = cellFromXY(point_irradiance, c(out$x[i],out$y[i]))
point_irradiance[idx] = 1
}
point_irradiance[1,1] = 10
point_irradiance[1,1]
point_irradiance
plot(point_irradiance)
xidx
xidx
out$xidx
out$xidx[1]
out$yidx[1]
point_irradiance[out$xidx[1],out$yidx[1]]
point_irradiance[out$xidx[1],out$yidx[1]] <- 1
point_irradiance[out$xidx[1],out$yidx[1]]
values(point_irradiance) <- 0
for (i in 1:nrow(out)) {
point_irradiance[out$xidx[i],out$yidx[i]] <- 1
}
plot(point_irradiance)
plot(crop(point_irradiance,extent(xmin,xmax,ymin,ymax)))
for (i in 1:nrow(out)) {
point_irradiance[out$xidx[i-1]:out$xidx[i+1],out$yidx[i-1]:out$yidx[i+1]] <- 1
}
values(point_irradiance[out$xidx[i-1]:out$xidx[i+1],out$yidx[i-1]:out$yidx[i+1]]) <- 1
for (i in 1:nrow(out)) {
setValues(point_irradiance[out$xidx[i-1]:out$xidx[i+1],out$yidx[i-1]:out$yidx[i+1]]) <- 1
}
i <- 1
values(point_irradiance[out$xidx[i-1]:out$xidx[i+1],out$yidx[i-1]:out$yidx[i+1]]) <- 1
i <- 1
values(point_irradiance[out$xidx[i]-1:out$xidx[i]+1,out$yidx[i]-1:out$yidx[i]-1]) <- 1
setValues(point_irradiance[out$xidx[i]-1:out$xidx[i]+1,out$yidx[i]-1:out$yidx[i]-1]) <- 1
setValues(point_irradiance[out$xidx[i]-1:out$xidx[i]+1,out$yidx[i]-1:out$yidx[i]-1]),1)
setValues(point_irradiance[out$xidx[i]-1:out$xidx[i]+1,out$yidx[i]-1:out$yidx[i]-1],1)
setValues(point_irradiance,1,index=c(out$xidx[i]-1:out$xidx[i]+1,out$yidx[i]-1:out$yidx[i]-1))
point_irradiance
plot(point_irradiance)
values(point_irradiance) <- 0
point_irradiance <- ground
values(point_irradiance) <- 0
point_irradiance
for (i in 1:nrow(out)) {
setValues(point_irradiance,1,index=c(out$xidx[i]-1:out$xidx[i]+1,out$yidx[i]-1:out$yidx[i]-1))
}
plot(point_irradiance)
point_irradiance
i <- 1
setValues(point_irradiance,1,index=c(out$xidx[i]-1:out$xidx[i]+1,out$yidx[i]-1:out$yidx[i]-1))
plot(point_irradiance)
xs <- setValues(point_irradiance,1,index=c(out$xidx[i]-1:out$xidx[i]+1,out$yidx[i]-1:out$yidx[i]-1))
plot(xs)
point_irradiance
xs
# NOT RUN {
r <- raster(ncol=10, nrow=5)
plot(r)
r
setValues(r,1,index=c(1:10))
plot(r)
values(r) <- 1#1:ncell(r)
setValues(r,1,index=c(1:10))
values(r) <- 0#1:ncell(r)
setValues(r,1,index=c(1:10))
plot(r)
values(r) <- 0#1:ncell(r)
r
setValues(r,1,index=c(1:10,1))
plot(r)
# NOT RUN {
r <- raster(ncol=10, nrow=5)
values(r) <- 0#1:ncell(r)
plot(r)
r
r <- setValues(r,1,index=c(1:10,1))
plot(r)
r
r <- setValues(r,rep(1,10),index=c(1:10,1))
Xmin
xmin
values(r) <- 0#1:ncell(r)
r[5,5] <- 1
plot(r)
values(point_irradiance) <- 0
for (i in 1:nrow(out)) {
point_irradiance[out$xidx[i]out$yidx[i]] <- 1
}
for (i in 1:nrow(out)) {
point_irradiance[out$xidx[i],out$yidx[i]] <- 1
}
dtm
out
#step by resolution
for (xx in x[i]-ext:x[i]+ext) {
for (yy in y[i]-ext:y[i]+ext) {
zdist <- dtm[xidx[i],yidx[i]]+out$z[i] - (dtm[xx,yy]+sensor_ht)
xydist <- sqrt((out$x[i]-xx)^2+(out$y[i]-yy,zdist)^2)
print(zdist)
print(xydist)
}
}
#step by resolution
for (xx in x[i]-ext:x[i]+ext) {
for (yy in y[i]-ext:y[i]+ext) {
zdist <- dtm[xidx[i],yidx[i]]+out$z[i] - (dtm[xx,yy]+sensor_ht)
xydist <- sqrt((out$x[i]-xx)^2+(out$y[i]-yy)^2)
print(zdist)
print(xydist)
}
}
#step by resolution
for (xx in x[i]-ext:x[i]+ext) {
for (yy in y[i]-ext:y[i]+ext) {
#zdist <- dtm[xidx[i],yidx[i]]+out$z[i] - (dtm[xx,yy]+sensor_ht)
xydist <- sqrt((out$x[i]-xx)^2+(out$y[i]-yy)^2)
#print(zdist)
print(xydist)
}
}
ext
#step by resolution
for (xx in x[i]-buffer:x[i]+buffer) {
for (yy in y[i]-buffer:y[i]+buffer) {
#zdist <- dtm[xidx[i],yidx[i]]+out$z[i] - (dtm[xx,yy]+sensor_ht)
xydist <- sqrt((out$x[i]-xx)^2+(out$y[i]-yy)^2)
#print(zdist)
print(xydist)
}
}
buffer
x[i]
i
#step by resolution
for (xx in out$x[i]-buffer:out$x[i]+buffer) {
for (yy in out$y[i]-buffer:out$y[i]+buffer) {
#zdist <- dtm[xidx[i],yidx[i]]+out$z[i] - (dtm[xx,yy]+sensor_ht)
xydist <- sqrt((out$x[i]-xx)^2+(out$y[i]-yy)^2)
#print(zdist)
print(xydist)
}
}
100^2
sqrt(100^2+100^2)
out$
out$x[i]
#step by resolution
for (xx in out$x[i]-buffer:out$x[i]+buffer) {
for (yy in out$y[i]-buffer:out$y[i]+buffer) {
#zdist <- dtm[xidx[i],yidx[i]]+out$z[i] - (dtm[xx,yy]+sensor_ht)
#xydist <- sqrt((out$x[i]-xx)^2+(out$y[i]-yy)^2)
#print(zdist)
#print(xydist)
print(out$x[i]-xx)
}
}
out$x[i]
#step by resolution
for (xx in out$x[i]-buffer:out$x[i]+buffer) {
print(out$x[i]-xx)
#  for (yy in out$y[i]-buffer:out$y[i]+buffer) {
#zdist <- dtm[xidx[i],yidx[i]]+out$z[i] - (dtm[xx,yy]+sensor_ht)
#xydist <- sqrt((out$x[i]-xx)^2+(out$y[i]-yy)^2)
#print(zdist)
#print(xydist)
# print(out$x[i]-xx)
#  }
}
buffer
out$x[i]
out$x[i]-buffer
out$x[i]+buffer
out$x[i]-buffer:out$x[i]+buffer
(out$x[i]-buffer):(out$x[i]+buffer)
#step by resolution
for (xx in (out$x[i]-buffer):(out$x[i]+buffer)) {
print(xx)
#  print(out$x[i]-xx)
#  for (yy in out$y[i]-buffer:out$y[i]+buffer) {
#zdist <- dtm[xidx[i],yidx[i]]+out$z[i] - (dtm[xx,yy]+sensor_ht)
#xydist <- sqrt((out$x[i]-xx)^2+(out$y[i]-yy)^2)
#print(zdist)
#print(xydist)
# print(out$x[i]-xx)
#  }
}
#  print(xx)
print(out$x[i]-xx)
#step by resolution
for (xx in (out$x[i]-buffer):(out$x[i]+buffer)) {
#  print(xx)
print(out$x[i]-xx)
#  for (yy in out$y[i]-buffer:out$y[i]+buffer) {
#zdist <- dtm[xidx[i],yidx[i]]+out$z[i] - (dtm[xx,yy]+sensor_ht)
#xydist <- sqrt((out$x[i]-xx)^2+(out$y[i]-yy)^2)
#print(zdist)
#print(xydist)
# print(out$x[i]-xx)
#  }
}
#step by resolution
for (xx in (out$x[i]-buffer):(out$x[i]+buffer)) {
for (yy in (out$y[i]-buffer):(out$y[i]+buffer)) {
#zdist <- dtm[xidx[i],yidx[i]]+out$z[i] - (dtm[xx,yy]+sensor_ht)
xydist <- sqrt((out$x[i]-xx)^2+(out$y[i]-yy)^2)
#print(zdist)
print(xydist)
}
}
Xmin
#step by resolution
for (xx in (out$x[i]-buffer):(out$x[i]+buffer)) {
for (yy in (out$y[i]-buffer):(out$y[i]+buffer)) {
zdist <- dtm[xidx[i],yidx[i]]+out$z[i] - (dtm[xx-Xmin,yy-Ymin]+sensor_ht)
xydist <- sqrt((out$x[i]-xx)^2+(out$y[i]-yy)^2)
#print(zdist)
#print(xydist)
}
}
shiny::runApp('C:/Users/lucy_/bats/circuitscape/shiny/src')
runApp('C:/Users/lucy_/bats/circuitscape/shiny/src')
runApp('C:/Users/lucy_/bats/circuitscape/shiny/src')
runApp('C:/Users/lucy_/bats/circuitscape/shiny/src')
runApp('C:/Users/lucy_/bats/circuitscape/shiny/src')
runApp('C:/Users/lucy_/bats/circuitscape/shiny/src')
runApp('C:/Users/lucy_/bats/circuitscape/shiny/src')
runApp('C:/Users/lucy_/bats/circuitscape/shiny/src')
runApp('C:/Users/lucy_/bats/circuitscape/shiny/src')
runApp('C:/Users/lucy_/bats/circuitscape/shiny/src')
shiny::runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
TeX("$CO_{2}$")
library(latex2exp)
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
TeX('$\\alpha^\\beta$')
plot(TeX("A $\\LaTeX$ formula: $\\frac{2hc^2}{\\lambda^5} \\,
\\frac{1}{e^{\\frac{hc}{\\lambda k_B T}} - 1}$"), cex=2)
plot(TeX("$CO_{2}$ Emissions per passenger are "), floor(emission_dist), TeX("km$^{-1}g$"), "with social distancing or ", floor(emission_shield), TeX("km$^{-1}g$"), " with shields")
runApp('C:/Users/lucy_/covid-recovery/app')
latex2exp_examples()
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
plot_colors <- c("blue","black", "green", "orange", "pink")
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
pass <- linspace(1, 76, n = 76)
emission_per_pass_train(pass)
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
data.frame("x" = c(1,2),"y"= c(1,2))
df  <- data.frame("x" = c(1,2),"y"= c(1,2))
df[1] + c(1,2,)
df[1] + c(1,2)
df[1]
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
df
df[1]
df[,1]
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
seat_locations[,j]
seat_locations[,1]
seat_locations[1,]
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
shiny::runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('C:/Users/lucy_/covid-recovery/app')
runApp('C:/Users/lucy_/covid-recovery/app')
shiny::runApp('C:/Users/lucy_/covid-recovery/app')
IM = as.raster(paste0("floorplan", 150, ".png"))
IM
plot(IM)
install.packages(ReadImages)
install.packages("ReadImages")
install.packages("jpeg")
library(jpeg)
#   im<-load.image(paste0("floorplan", input$inputSelect, ".png"))
#    plot(im)
IM = readJPEG(paste0("floorplan", 150, ".png"))
list.files()
getwd()
setwd("C:/Users/lucy_/tfw/app")
#   im<-load.image(paste0("floorplan", input$inputSelect, ".png"))
#    plot(im)
IM = readJPEG(paste0("floorplan", 150, ".png"))
library(raster)
jpg <- stack(paste0("floorplan", 150, ".png"))
plotRGB(jpg)
shiny::runApp()
runApp()
install.packages("biOps")
runApp()
